library(mfergm)
data(sampson)
data(samplik)
data(samplike)
data(sampson)
ergm()
library(mfergm)
data(sampson)
library(mfergm)
data(sampson)
plot(samplike)
formula <- samplike ~ edges + ostar(2:10)
ergm.getmodel(formula)
ergm.getnetwork(formula)
- 0.2*log(.08) - 0.8*log(0.2)
- 0.2*log(.08) - 0.8*log(0.2)
(- 0.2*log(.08) - 0.8*log(0.2))*3
(- 0.2*log(.2) - 0.8*log(0.8))*3
(- 0.2*log(.2) - 0.8*log(0.8))
(- 0.2*log(.2) - 0.8*log(0.8))*3
library(mfergm)
mu
mu <- matrix((0,0.2,0.2,0.2,0,0.2,0.2,0.2,0), nrow =3, ncol =3)
mu <- matrix(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0), nrow =3, ncol =3)
mu <- matrix(c(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0), nrow =3, ncol =3)
mu
mu <- matrix(c(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0), nrow =3, ncol =3)
entropy(mu)
return(entropy$ent)
library(mfergm)
mu <- matrix(c(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0), nrow =3, ncol =3)
entropy(mu)
entropy(mu)
library(mfergm)
help(entropy)
library(devtools)
install.packages("Rtoools")
install.packages("Rtools")
find_rtools()
library(devtools)
library(mfergm)
library(roxygen2)
?roxygen2
?roxygen
roxygen(mfergm)
roxygen2(mfergm)
roxygenize(mfergm)
vignette("roxygen2")
devtools::document()
library(mfergm)
help(entropy)
devtools::document()
?entropy
library(mfergm)
?entropy
mu <- matrix(c(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0),
nrow = 3,
ncol = 3
)
entropy(mu)
devtools::document()
library(mfergm)
?entropy
library(mfergm)
?entropy
library(mfergm)
library(mfergm)
.6/3
1.2
1.2/9
.133333^23
.133333^2
1.2/27
.6^2
1.2/6
1.2/6
1.2/6
.2^2
.8/9
.4/9
1.2/9
99900/1000000
0.0999^2
19940/1000000
99900/2000000
0.04995^2
19940/1000000
19940/2000000
99900/1000000
19940/1000000
0.0999^2
19940/2000000
19960/2000000
formula <- e ~ edges + triangle
term.list.formula(formula[[3]])
library(ergm)
formula <- e ~ edges + triangle
term.list.formula(formula[[3]])
v<-term.list.formula(formula[[3]])
v
length(v)
is.call(v[[1]])
is.call(v[[2]])
exists(v[[2]])
?is.call
formula <- e ~ edges + triangle + nodematch(x)
x
length(v)
v<-term.list.formula(formula[[3]])
v<-term.list.formula(formula)
v
v<-term.list.formula(formula[[3]])
v
formula
formula[[1]]
formula[[2]]
formula[[3]]
fname <- paste(termroot,"Term.", v[[i]][[1]], sep = "")
fname <- paste("InitErgm","Term.", v[[i]][[1]], sep = "")
fname <- paste("InitErgm","Term.", v[[2]][[1]], sep = "")
fname <- paste("InitErgm","Term.", v[[2]][1], sep = "")
v
fname <- paste("InitErgm","Term.", v[[2]][1], sep = "")
fname <- paste("InitErgm","Term.", v[[2]], sep = "")
fname
fname <- paste("InitErgm","Term.", v[[2]][[1]], sep = "")
fname <- paste("InitErgm","Term.", v[[2]], sep = "")
newInitErgm <- exists(fname, envir=formula.env, mode="function")
formula.env<-environment(formula)
newInitErgm <- exists(fname, envir=formula.env, mode="function")
newInitErgm
library(mfergm)
exists("entropy", envir = formula.env, mode = "function")
exists("Eedges", envir = formula.env, mode = "function")
InitErgmTerm.edges
library(mfergm)
help(entropy)
mu <- matrix(c(0,0.2,0.2,0.2,0,0.2,0.2,0.2,0),
nrow = 3,
ncol = 3
)
entropy(mu)
mu <- matrix(c(0,0.3,0.1,0.2,0,0.2,0.2,0.2,0),
nrow = 3,
ncol = 3
)
entropy(mu)
mu <- matrix(c(0,0.3,0.1,0.1,0,0.1,0.4,0.2,0),
nrow = 3,
ncol = 3
)
entropy(mu)
library(mfergm)
n <- 100
x <- rnorm(n,0,1)
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
mu
n <- 10
x <- rnorm(n,0,1)
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
mu
library(mfergm)
library(mfergm)
n <- 10
x <- rnorm(n,0,1)
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
p <- c(1,2)
q <- 1
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[:,1] <- c(1,1)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
theta = c(-3.0,1.5)
tol = 0.000001
psi <- function(p, mu, theta, x, dt, tol)
psi
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
x
as.double(x)
maatrix(as.double(x), nrow = n, ncol = q)
matrix(as.double(x), nrow = n, ncol = q)
library(mfergm)
p
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
class(x)
class(as.double(x))
maatrix(as.double(x), nrow = n, ncol = q)
matrix(as.double(x), nrow = n, ncol = q)
p <- c(1,2)
q <- 1
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
theta = c(-3.0,1.5)
tol = 0.000001
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
q <- 1
library(mfergm)
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
theta = c(-3.0,1.5)
tol = 0.000001
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
matrix(as.double(x), nrow = n)
x <- rnorm(n,0,1)
x <- rnorm(2*n,0,1)
x
matrix(as.double(x), nrow = n)
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
dim(x)[2]
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
---
dasda
library(mfergm)
library(devtools)
library(ROXIGEN2)
library(roxygen2)
?roxygen
roxygenize('mfergm')
roxygenize("mfergm")
vignette("roxygen2", package="roxygen2")
roxygen2::roxygenize("mfergm")
roxygen2::roxygenize()
roxygen2::roxygenize()
?logconstant_mf
?entropy
library(mfergm)
?logconstant_mf
roxygen2::roxygenize()
roxygen2::roxygenize()
library(mfergm)
?logconstant_mf
pso
psi
psi$psi
install.packages("statnet")
install.packages("devtools")
install.packages("devtools")
library(mfergm)
help(logconstant_mf)
ls()
clear
library(mfergm)
psi
nsim <- 10
logc <- rep(0,nsim)
logc
sort(1,2,3)
sort(c(1,2,3))
sort(c(4,1,3))
library(mfergm)
### check if mfergm works fine
# library mfergm (also loads ergm, networks)
library(mfergm)
# set seed
set.seed(1977)
# size of the network
n <- 200
# attributes
x <- rnorm(n,0,1)
## create network from random erdos renyi
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
## edges and stars
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-3.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta*c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500 # number of re-starts of the algorithm
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
library(mfergm)
nsim <- 500 # number of re-starts of the algorithm
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
psi_mf <- max(logc)
# compute log likelihood value
loglik <- potential - psi_mf
g0
loglik
max(logc)
exp(max(logc))
exp(potential)
a <- seq(-4,-2,.1)
b <- seq(0,1,.1)
loglik_grid <- matrix(NA, nrow = length(a), ncol = length(b))
dim(loglik_grid)
