{
    "collab_server" : "",
    "contents" : "#' Generate networks and estimates parameters \n#' \n#' This function simulates \\code{nsims} networks, and \n#' compares estimates using \n#' the ergm routines, the Chatterje-Diaconis 2013 mean-field\n#' and the more general mean-field approximation. The model\n#' is a model with edges and 2-stars.\n#' \n#' @param theta true parameters vector\n#' @param n size of the network\n#' @param nsims number of simulated networks to estimate\n#' @param ninit number of trials for mean field approximation (if mfergm = TRUE)\n#' @param ergm logical, if FALSE will not perform ergm estimation\n#' @param cd logical, if FALSE will not perform Chatterjee-Diaconis estimation\n#' @param mfergm logical, if FALSE will not perform mean-field estimation\n#' @param mple logical, if FALSE will not perform MPLE estimation\n#' @param sim.seed seed for the random number generator\n\nsimulate.model1 <- function(theta, n = 10, nsims = 2, ninit = 5,\n                            ergm = FALSE, cd = TRUE, mfergm = FALSE, mple = FALSE,\n                            sim.seed = 1977) {\n  \n  library(mfergm)\n  set.seed(sim.seed) # seed for the simulations\n  #n <- 100  # size of the network\n  #nsims <- 2 # number of simulations\n  x <- rnorm(n,0,1) # attributes\n  p <- c(1,2) # parameters location\n  q <- 1  # columns of x\n  \n  # change stats to use\n  dt <- matrix(0, ncol = p[2], nrow = 2)\n  dt[,1] <- c(1,1)\n  dt[,2] <- c(1,1)\n  \n  #theta = c(-2.0,3.0) # true parameters\n  tol = 0.000001 # tolerance for mf\n  \n  # create network from random erdos renyi\n  cat(\"initializing network for simulations\")\n  g <- initialize.network(theta, n, directed = FALSE)\n  \n  # simulate nsims networks\n  cat(\"\\n\")\n  cat(paste(\"generate \", nsims, \" networks\", \"\\n\"))\n  g0 <- simulate(~edges+kstar(2), \n                 nsim = nsims, \n                 coef = theta*c(2,1/n ),\n                 basis = g,\n                 control=control.simulate(\n                   MCMC.burnin=10000000,\n                   MCMC.interval=10000)\n  )\n  \n  # observed statistics for the sample\n  tobs <- data.frame(matrix(NA, ncol = 2, nrow = nsims))\n  names(tobs) <- c(\"edges\", \"kstar(2)\")\n  for (i in 1:nsims) {\n    formula <- g0[[i]] ~ edges + kstar(2)\n    #tobs[i,] <- summary(formula)/(c((n^2)/2, n^3))  \n    tobs[i,] <- summary(formula)/(c((n^2)/2, (n^3)/2 ))  \n  }\n  cat(paste(\"observed stats\", tobs, \"\\n\"))\n  # initialize data.frame with estimation results\n  estim.table<- data.frame(matrix(NA, nrow = nsims, ncol = 8))\n  names(estim.table) <- c(\"ergm\", \"ergm\", \n                          \"CD2013\", \"CD2013\", \n                          \"MF\", \"MF\", \"mple\", \"mple\")\n  \n  # estimate using ergm routines\n  if (ergm == TRUE) {\n    cat(paste(\"estimating using ergm package\", \"\\n\"))\n    for (i in 1:nsims) {\n      cat(\"***********************************\\n\")\n      cat(paste(\"estimating sample\" ,i, \"\\n\"))\n      cat(\"***********************************\\n\")\n      #set.seed(1977)\n      formula <- g0[[i]] ~ edges + kstar(2)\n      m1ergm <- ergm(formula, estimate = \"MLE\",\n                     control=control.ergm(\n                       MCMC.burnin=100000,\n                       MCMC.interval=1000,\n                       init = theta*c(2,1/n ))\n      )\n      est.params <- summary(m1ergm)$coef\n      estim.table[i,1:2] <- c(est.params[1:2,1])*c(.5,n)\n    }\n  }\n\n  # estimate using chatterjee-diaconis\n  if (cd == TRUE) {\n    cat(paste(\"estimating using Chatterjee-Diaconis approximation\", \"\\n\"))\n    library(optimx)\n    for (i in 1:nsims) {\n      cat(\"***********************************\\n\")\n      cat(paste(\"estimating sample\" ,i, \"\\n\"))\n      cat(\"***********************************\\n\")\n      pars <- theta\n      cd.est <- optimx(pars, loglik.model1, \n                       method = \"BFGS\", \n                       control = list(fnscale = -1), \n                       tobs = tobs[i,])\n      estim.table[i,3:4] <- c(cd.est[1:2])\n      \n    }\n  }\n  \n  # estimate with mfergm\n  if (mfergm == TRUE) {\n    cat(paste(\"estimating Mean field approximation\", \"\\n\"))\n    library(optimx)\n    for (i in 1:nsims) {\n      cat(\"***********************************\\n\")\n      cat(paste(\"estimating sample\" ,i, \"\\n\"))\n      cat(\"***********************************\\n\")\n      pars <- theta\n      cd.est <- optimx(pars, loglikmf.model1, \n                       method = \"BFGS\", \n                       control = list(fnscale = -1), \n                       n = n,\n                       tobs = tobs[i,], \n                       ninit = ninit)\n      estim.table[i,5:6] <- c(cd.est[1:2])\n      \n    }\n    \n  }\n  \n  # estimate using ergm routines\n  if (mple == TRUE) {\n    cat(paste(\"estimating MPLE using ergm package\", \"\\n\"))\n    for (i in 1:nsims) {\n      cat(\"***********************************\\n\")\n      cat(paste(\"estimating sample\" ,i, \"\\n\"))\n      cat(\"***********************************\\n\")\n      #set.seed(1977)\n      formula <- g0[[i]] ~ edges + kstar(2)\n      m1ergm <- ergm(formula, estimate = \"MPLE\",\n                     control=control.ergm(\n                       MCMC.burnin=100000,\n                       MCMC.interval=1000,\n                       init = theta*c(2,1/n ))\n      )\n      est.params <- summary(m1ergm)$coef\n      estim.table[i,7:8] <- c(est.params[1:2,1])*c(.5,n)\n    }\n  }\n  \n  data <- list(g0,theta,n,nsims,tol,dt, tobs, estim.table)\n  names(data) <- c(\"sample\", \"params\", \"n\", \"nsims\", \"tol\", \"changestats\", \"stats0\", \"estimates\")\n  return(data)\n  \n}",
    "created" : 1477948244381.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3774318251",
    "id" : "1A745956",
    "lastKnownWriteTime" : 1477949502,
    "last_content_update" : 1477949502416,
    "path" : "~/Dropbox/mfergm/programs/mfergm/R/simulate.model1.R",
    "project_path" : "R/simulate.model1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}