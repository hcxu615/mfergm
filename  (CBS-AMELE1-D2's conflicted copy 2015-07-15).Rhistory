library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
dim(x)[2]
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
library(mfergm)
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi
---
dasda
library(mfergm)
library(devtools)
library(ROXIGEN2)
library(roxygen2)
?roxygen
roxygenize('mfergm')
roxygenize("mfergm")
vignette("roxygen2", package="roxygen2")
roxygen2::roxygenize("mfergm")
roxygen2::roxygenize()
roxygen2::roxygenize()
?logconstant_mf
?entropy
library(mfergm)
?logconstant_mf
roxygen2::roxygenize()
roxygen2::roxygenize()
library(mfergm)
?logconstant_mf
pso
psi
psi$psi
install.packages("statnet")
install.packages("devtools")
install.packages("devtools")
library(mfergm)
help(logconstant_mf)
ls()
clear
library(mfergm)
psi
nsim <- 10
logc <- rep(0,nsim)
logc
sort(1,2,3)
sort(c(1,2,3))
sort(c(4,1,3))
library(mfergm)
set.seed(1977)
n <- 100
x <- rnorm(n,0,1)
p <- c(1,2)
q <- 1
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
theta = c(-3.0,1.5)
tol = 0.000001
nsim <- 100
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
mu
sum(mu)
sum(mu/n^2)
sum(mu/(n^2))
set.seed(1977)
n <- 100
x <- rnorm(n,0,1)
p <- c(1,2)
q <- 1
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
theta = c(-3.0,1.5)
tol = 0.000001
nsim <- 100
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
nsim <- 500
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
g <- network(matrix(rbinom(n^2,.1)))
?rbinom
g <- network(matrix(rbinom(n^2,1,.1)))
g
plot(g)
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol =n))
plot(g)
edges(g)
edge(g)
formula <- g ~ edges + kstar(2)
summary(formula)
formula <- g ~ edges + kstar
summary(formula)
g <- network(matrix(rbinom(n^2,1,.1)), directed = FALSE)
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
formula <- g ~ edges + kstar
summary(formula)
formula <- g ~ edges + kstar(2)
summary(formula)
n
summary(formula)/(c(n^2, n^3))
.09^2
?ergm.simulate
?ergm
g0 <- simulate.ergm(formula)
g0 <- simulate.ergm(formula, coef = theta)
g0 <- simulate.ergm(g~edges + kstar(2), coef = theta)
g0 <- simulate.ergm(~edges + kstar(2),
nsim = 1,
coef = theta,
basis = g)
g0 <- simulate.ergm(~edges+kstar(2),
nsim = 1,
coef = theta,
basis = g)
g0 <- simulate.ergm(~edge+kstar(2),
nsim = 1,
coef = theta,
basis = g)
theta = c(-3.0,1.5)
g0 <- simulate.ergm(~edge+kstar(2),
nsim = 1,
coef = theta,
basis = g)
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
g0 <- simulate.ergm(~edge+kstar(2),
nsim = 1,
coef = theta,
basis = g)
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta,
basis = g)
g0
g
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta,
basis = g,
control=control.simulate(
MCMC.burnin=1000,
MCMC.interval=100)
)
g0
g
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta,
basis = g,
control=control.simulate(
MCMC.burnin=10000,
MCMC.interval=100)
)
g0
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=10000,
MCMC.interval=100)
)
g0
g
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=100000,
MCMC.interval=100)
)
g0
g
summary(g0)
summary(g0 ~ edges + kstar(2))
tobs <- summary(formula)/(c(n^2, n^3))
tobs
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
source('~/.active-rstudio-document', echo=TRUE)
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
theta*tobs
sum(theta*tobs)
theta %*% tobs
### check if mfergm works fine
## create network from random erdos renyi
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
## edges and stars
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
# set seed
set.seed(1977)
# size of the network
n <- 100
# attributes
x <- rnorm(n,0,1)
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-3.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
loglik <- potential -max(logc)
loglik
g0
## create network from random erdos renyi
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
## edges and stars
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
# set seed
set.seed(1977)
# size of the network
n <- 100
# attributes
x <- rnorm(n,0,1)
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-6.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta/c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
loglik <- potential -max(logc)
g0
theta/c(1,1/n)
theta*c(1,1/n)
## create network from random erdos renyi
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
## edges and stars
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
# set seed
set.seed(1977)
# size of the network
n <- 100
# attributes
x <- rnorm(n,0,1)
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-6.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta*c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
loglik <- potential -max(logc)
g0
loglik
theta = c(-3.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta*c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
loglik <- potential -max(logc)
g0
loglik
max(logc)
exp(max(logc))
exp(potential)
n <- 200
# attributes
x <- rnorm(n,0,1)
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-3.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta*c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
# set seed
set.seed(1977)
# size of the network
n <- 200
# attributes
x <- rnorm(n,0,1)
## create network from random erdos renyi
g <- network(matrix(rbinom(n^2,1,.1), nrow = n, ncol = n), directed = FALSE)
## edges and stars
formula <- g ~ edges + kstar(2)
summary(formula)/(c(n^2, n^3))
# parameters location
p <- c(1,2)
q <- 1
# change stats to use
dt <- matrix(0, ncol = p[2], nrow = 2)
dt[,1] <- c(1,1)
dt[,2] <- c(1,1)
# parameters
theta = c(-3.0,0.5)
# tolerance for mf
tol = 0.000001
## generate network from simulation of ergm
g0 <- simulate(~edges+kstar(2),
nsim = 1,
coef = theta*c(1,1/n),
basis = g,
control=control.simulate(
MCMC.burnin=1000000,
MCMC.interval=100)
)
g0
## to compute suff stats
formula <- g0 ~ edges + kstar(2)
tobs <- summary(formula)/(c(n^2, n^3))
tobs
sum(theta*tobs)
potential <- theta %*% tobs
## mf approximation
nsim <- 500 # number of re-starts of the algorithm
logc <- rep(0,nsim)
for (sim in 1:nsim) {
mu <- matrix(runif(n^2,0,1), nrow = n, ncol = n)
diag(mu) <- 0
psi <- logconstant_mf(p, mu, theta, x, dt, tol)
psi$psi
logc[sim] <- psi$psi
}
logc
sort(logc)
psi_mf <- max(logc)
# compute log likelihood value
loglik <- potential - psi_mf
g0
loglik
max(logc)
max(logc)
exp(max(logc))
exp(potential)
