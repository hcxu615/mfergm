seed <- 13
results8 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results[71:80,]<- results8
results8
# run 10 simulations
seed <- 14
results9 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results[81:90,]<- results9
# run 10 simulations
seed <- 15
results9 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results[81:90,]<- results9
results9
# run 10 simulations
seed <- 16
results10 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results[91:100,]<- results10
results10
# make table
table_results <- matrix(NA, ncol = 9, nrow = 3)
#table_results[1,2:13] <- colMeans(results)
for (i in 1:9) {
table_results[1,i] <- mean(results[,i])
table_results[2,i] <- median(results[,i])
table_results[3,i] <- sd(results[,i])
}
colnames(table_results) <- c("MCMLE", "MCMLE", "MCMLE", "MF", "MF", "MF", "MPLE", "MPLE", "MPLE")
rownames(table_results) <- c("mean", "median", "se")
# latex table
xtable(table_results, digits = 3)
caption = paste("true=(", true_parameters[1],",",  true_parameters[2],",",  true_parameters[3],"); n=", nplayers, sep=""    ))
# latex table
xtable(table_results, digits = 3,
caption = paste("true=(",
true_parameters[1],",",
true_parameters[2],",",
true_parameters[3],"); n=", nplayers, sep=""))
###### n = 100 #####
nplayers <- 200  # number of players
true_parameters <- c(-2,1,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 6
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
# Table 5
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
###### n = 100 #####
nplayers <- 100  # number of players
true_parameters <- c(1,1,-2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 65
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results[1:10,]<- results1
results1
library(mfergm)
library(mfergm)
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
# Table 1
###### n = 100 #####
nplayers <- 100  # number of players
true_parameters <- c(-2,2,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 6
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
# Table 1
###### n = 100 #####
nplayers <- 100  # number of players
true_parameters <- c(-2,2,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 6
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = FALSE, mfergm = TRUE, mple = FALSE,
sim.seed = seed)
results1
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
# Table 1
###### n = 100 #####
nplayers <- 200  # number of players
true_parameters <- c(-2,2,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 6
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = FALSE, mfergm = TRUE, mple = FALSE,
sim.seed = seed)
results1
library(mfergm)
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
# Table 1
###### n = 100 #####
nplayers <- 100  # number of players
true_parameters <- c(-2,2,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
# n = 100
# run 10 simulations
seed <- 6
results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = FALSE, mfergm = TRUE, mple = FALSE,
sim.seed = seed)
results1
library(mfergm)
### Tables Berkeley
library(mfergm)
library(xtable)
rm(list=ls())
# Table 1
###### n = 100 #####
nplayers <- 100  # number of players
true_parameters <- c(-2,1,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
number_of_simulations_each <- 10
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
try(results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
seed = 1
try(results1 <- simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
result1
try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
res
?erg.MCMLE
?ergm.MCMLE
ergm
?ergm
?ergm.simulate
?ergm.mcmle
?ergm.MCMLE
control.simulate()
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
res
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
res<-try(simulate.model2(true_parameters, n = nplayers,
nsims = 10, ninit = 5,
ergm = TRUE, mfergm = F, mple = F,
sim.seed = seed)$estimates )
library(mfergm)
install.packages("devtools")
install.packages("devtools")
install.packages("statnet")
install.packages("devtools")
simulate.model4 <- function(theta, n = 10, nsims = 2, ninit = 5,
ergm = FALSE, cd = TRUE, mfergm = FALSE, mple = FALSE,
sim.seed = 1977) {
library(mfergm)
set.seed(1) # seed for the simulations
#n <- 100  # size of the network
#nsims <- 2 # number of simulations
nsims <- 1
ninit <- 5
theta <- c(-3,4,-5)
n <- 100
x <- rbinom(n,1,.5) # attributes
p <- c(2,3) # parameters location
q <- 1  # columns of x
# change stats to use
dt <- matrix(0, ncol = 2, nrow =  p[2])
dt[,1] <- c(1,1,1)
dt[,2] <- c(1,9,1)
#theta = c(-2.0,3.0) # true parameters
tol = 0.000001 # tolerance for mf
# create network from random erdos renyi
cat("initializing network for simulations")
g <- initialize.network(theta, n, directed = FALSE)
set.vertex.attribute(g, # the name of the network object
"x", # the name we want to reference the variable by in that object
x # the value we are giving that variable
)
# simulate nsims networks
cat("\n")
cat(paste("generate ", nsims, " networks", "\n"))
g0 <- simulate(~edges+nodematch("x")+kstar(2),
nsim = nsims,
coef = theta*c(2,2,1/n ),
basis = g,
control=control.simulate(
MCMC.burnin=10000000,
MCMC.interval=10000)
)
# observed statistics for the sample
tobs <- data.frame(matrix(NA, ncol = 3, nrow = nsims))
names(tobs) <- c("edges", "x", "kstar(2)")
for (i in 1:nsims) {
formula <- g0 ~ edges + nodematch("x") + kstar(2)
#tobs[i,] <- summary(formula)/(c((n^2)/2, n^3))
tobs[i,] <- summary(formula)/(c((n^2)/2, (
n^2)/2, (n^3)/2 ))
}
cat(paste("observed stats", tobs, "\n"))
# initialize data.frame with estimation results
estim.table<- data.frame(matrix(NA, nrow = nsims, ncol = 9))
names(estim.table) <- c("ergm", "ergm", "ergm",
#"CD2013", "CD2013",
"MF", "MF", "MF",
"mple", "mple", "mple")
# estimate using ergm routines
if (ergm == TRUE) {
cat(paste("estimating using ergm package", "\n"))
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
#set.seed(1977)
formula <- g0 ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- summary(m1ergm)$coef
estim.table[i,1:3] <- c(est.params[1:3,1])*c(.5,.5,n)
}
}
# # estimate using chatterjee-diaconis
# if (cd == TRUE) {
#   cat(paste("estimating using Chatterjee-Diaconis approximation", "\n"))
#   library(optimx)
#   for (i in 1:nsims) {
#     cat("***********************************\n")
#     cat(paste("estimating sample" ,i, "\n"))
#     cat("***********************************\n")
#     pars <- theta
#     cd.est <- optimx(pars, loglik.model1,
#                      method = "BFGS",
#                      control = list(fnscale = -1),
#                      tobs = tobs[i,])
#     estim.table[i,3:4] <- c(cd.est[1:2])
#
#   }
# }
# estimate with mfergm
if (mfergm == TRUE) {
cat(paste("estimating Mean field approximation", "\n"))
library(optimx)
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
pars <- theta
addpars <- list(n = n,tobs = tobs[i,],x=x,ninit= ninit)
cd.est <- optimx(pars, fn = loglikmf.model2,
method = "Nelder-Mead",
control = list(fnscale = -1), addpars = addpars)
#list(n = n,
#tobs = tobs[i,], x = x) )
#ninit = ninit)
estim.table[i,4:6] <- c(cd.est[1:3])
}
}
# estimate using ergm routines
if (mple == TRUE) {
cat(paste("estimating MPLE using ergm package", "\n"))
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
#set.seed(1977)
formula <- g0[[i]] ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MPLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- summary(m1ergm)$coef
estim.table[i,7:9] <- c(est.params[1:3,1])*c(.5,.5,n)
}
}
data <- list(g0,theta,n,nsims,tol,dt, tobs, estim.table)
names(data) <- c("sample", "params", "n", "nsims", "tol", "changestats", "stats0", "estimates")
return(data)
}
#n <- 100  # size of the network
#nsims <- 2 # number of simulations
nsims <- 1
ninit <- 5
theta <- c(-3,4,-5)
n <- 100
x <- rbinom(n,1,.5) # attributes
p <- c(2,3) # parameters location
q <- 1  # columns of x
# change stats to use
dt <- matrix(0, ncol = 2, nrow =  p[2])
dt[,1] <- c(1,1,1)
dt[,2] <- c(1,9,1)
#theta = c(-2.0,3.0) # true parameters
tol = 0.000001 # tolerance for mf
# create network from random erdos renyi
cat("initializing network for simulations")
g <- initialize.network(theta, n, directed = FALSE)
library(mfergm)
set.seed(1) # seed for the simulations
g <- initialize.network(theta, n, directed = FALSE)
set.vertex.attribute(g, # the name of the network object
"x", # the name we want to reference the variable by in that object
x # the value we are giving that variable
)
# simulate nsims networks
cat("\n")
cat(paste("generate ", nsims, " networks", "\n"))
g0 <- simulate(~edges+nodematch("x")+kstar(2),
nsim = nsims,
coef = theta*c(2,2,1/n ),
basis = g,
control=control.simulate(
MCMC.burnin=10000000,
MCMC.interval=10000)
)
# observed statistics for the sample
tobs <- data.frame(matrix(NA, ncol = 3, nrow = nsims))
names(tobs) <- c("edges", "x", "kstar(2)")
for (i in 1:nsims) {
formula <- g0 ~ edges + nodematch("x") + kstar(2)
#tobs[i,] <- summary(formula)/(c((n^2)/2, n^3))
tobs[i,] <- summary(formula)/(c((n^2)/2, (
n^2)/2, (n^3)/2 ))
}
cat(paste("observed stats", tobs, "\n"))
# initialize data.frame with estimation results
estim.table<- data.frame(matrix(NA, nrow = nsims, ncol = 9))
names(estim.table) <- c("ergm", "ergm", "ergm",
#"CD2013", "CD2013",
"MF", "MF", "MF",
"mple", "mple", "mple")
# estimate using ergm routines
if (ergm == TRUE) {
cat(paste("estimating using ergm package", "\n"))
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
#set.seed(1977)
formula <- g0 ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- summary(m1ergm)$coef
estim.table[i,1:3] <- c(est.params[1:3,1])*c(.5,.5,n)
}
}
cat(paste("estimating Mean field approximation", "\n"))
library(optimx)
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
pars <- theta
addpars <- list(n = n,tobs = tobs[i,],x=x,ninit= ninit)
cd.est <- optimx(pars, fn = loglikmf.model2,
method = "Nelder-Mead",
control = list(fnscale = -1), addpars = addpars)
#list(n = n,
#tobs = tobs[i,], x = x) )
#ninit = ninit)
estim.table[i,4:6] <- c(cd.est[1:3])
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
pars <- theta
addpars <- list(n = n,tobs = tobs[i,],x=x,ninit= ninit)
cd.est <- optimx(pars, fn = loglikmf.model2,
method = "Nelder-Mead",
control = list(fnscale = -1), addpars = addpars)
#list(n = n,
#tobs = tobs[i,], x = x) )
#ninit = ninit)
estim.table[i,4:6] <- c(cd.est[1:3])
}
# estimate with mfergm
if (mfergm == TRUE) {
cat(paste("estimating Mean field approximation", "\n"))
library(optimx)
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
pars <- theta
addpars <- list(n = n,tobs = tobs[i,],x=x,ninit= ninit)
cd.est <- optimx(pars, fn = loglikmf.model2,
method = "Nelder-Mead",
control = list(fnscale = -1), addpars = addpars)
#list(n = n,
#tobs = tobs[i,], x = x) )
#ninit = ninit)
estim.table[i,4:6] <- c(cd.est[1:3])
}
}
}
library(mfergm)
