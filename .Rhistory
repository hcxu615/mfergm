plot(results$sample[[6]])
plot(results$sample[[7]])
plot(results$sample[[8]])
plot(results$sample[[9]])
plot(results$sample[[10]])
results$stats0
results$stats0*c(n^2, n^2, n^3, n^3)
n<-50
results$stats0*c(n^2, n^2, n^3, n^3)
plot(results$sample[[1]])
results$stats0*c(n^2)/2, (n^2)/2, (n^3)/2, (n^3)/2)
results$stats0*c((n^2)/2, (n^2)/2, (n^3)/2, (n^3)/2)
results$stats0*c((n^2)/2, (n^2)/2, (n^3), (n^3)/2)
results$stats0*c((n^2)/2, (n^2)/2, (n^3)/2, (n^3)/2)
results$stats0
results$stats0[1,]*c((n^2)/2, (n^2)/2, (n^3)/2, (n^3)/2)
results$stats0[2,]*c((n^2)/2, (n^2)/2, (n^3)/2, (n^3)/2)
plot(results$sample[[1]])
plot(results$sample[[1]], layout(cirle))
?layout
?layout
?layout.show
layout.show
?plot.network
plot(results$sample[[1]], layout= network.layout.circle(results$sample[[1]]))
plot(results$sample[[1]], layout= network.layout.circle(results$sample[[1]]))
plot(results$sample[[1]], network.layout.circle(results$sample[[1]]))
plot(results$sample[[1]], network.layout.circle(results$sample[[1]] ))
plot.network(results$sample[[1]], network.layout.circle(results$sample[[1]] ))
plot(results$sample[[1]])
plot.network(results$sample[[1]], network.layout.circle(results$sample[[1]] ))
plot.network(results$sample[[1]], network.layout.circle(results$sample[[1]] )
)
plot.network(results$sample[[1]], layout = network.layout.circle(results$sample[[1]] )
)
plot.network(results$sample[[1]], layout.par = network.layout.circle(results$sample[[1]] ))
plot.network(results$sample[[1]], mode = network.layout.circle(results$sample[[1]] ))
plot.network(results$sample[[1]], mode = "cirle"
)
plot.network(results$sample[[1]], mode = "circle")
plot.network(results$sample[[1]])
library(mfergm)
set.seed(1) # seed for the simulations
#n <- 100  # size of the network
#nsims <- 2 # number of simulations
nsims <- 1
ninit <- 5
theta <- c(-3,4,-5)
n <- 100
x <- rbinom(n,1,.5) # attributes
p <- c(2,3) # parameters location
q <- 1  # columns of x
# change stats to use
dt <- matrix(0, ncol = 2, nrow =  p[2])
dt[,1] <- c(1,1,1)
dt[,2] <- c(1,9,1)
#theta = c(-2.0,3.0) # true parameters
tol = 0.000001 # tolerance for mf
# create network from random erdos renyi
cat("initializing network for simulations")
simulate.model3()
g <- initialize.network(theta, n, directed = FALSE)
set.vertex.attribute(g, # the name of the network object
"x", # the name we want to reference the variable by in that object
x # the value we are giving that variable
)
# simulate nsims networks
cat("\n")
cat(paste("generate ", nsims, " networks", "\n"))
g0 <- simulate(~edges+nodematch("x")+kstar(2),
nsim = nsims,
coef = theta*c(2,2,1/n ),
basis = g,
control=control.simulate(
MCMC.burnin=10000000,
MCMC.interval=10000)
)
# observed statistics for the sample
tobs <- data.frame(matrix(NA, ncol = 3, nrow = nsims))
names(tobs) <- c("edges", "x", "kstar(2)")
for (i in 1:nsims) {
formula <- g0 ~ edges + nodematch("x") + kstar(2)
#tobs[i,] <- summary(formula)/(c((n^2)/2, n^3))
tobs[i,] <- summary(formula)/(c((n^2)/2, (
n^2)/2, (n^3)/2 ))
}
cat(paste("observed stats", tobs, "\n"))
# initialize data.frame with estimation results
estim.table<- data.frame(matrix(NA, nrow = nsims, ncol = 9))
names(estim.table) <- c("ergm", "ergm", "ergm",
#"CD2013", "CD2013",
"MF", "MF", "MF",
"mple", "mple", "mple")
cat(paste("estimating Mean field approximation", "\n"))
library(optimx)
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
pars <- theta
addpars <- list(n = n,tobs = tobs[i,],x=x,ninit= ninit)
cd.est <- optimx(pars, fn = loglikmf.model2,
method = "Nelder-Mead",
control = list(fnscale = -1), addpars = addpars)
#list(n = n,
#tobs = tobs[i,], x = x) )
#ninit = ninit)
estim.table[i,4:6] <- c(cd.est[1:3])
}
data <- list(g0,theta,n,nsims,tol,dt, tobs, estim.table)
names(data) <- c("sample", "params", "n", "nsims", "tol", "changestats", "stats0", "estimates")
return(data)
data
simulate.model3(theta, n=100,ninit=10)
theta
theta <- c(-3,1,-5)
simulate.model3(theta, n=100, nsims =1,ninit=10)
simulate.model3(theta, n=100, nsims =2,ninit=10)
theta <- c(-3,1,-3)
simulate.model3(theta, n=100, nsims =2,ninit=10)
theta <- -2,1,-1
theta <- c(-2,1,-1)
simulate.model3(theta, n=100, nsims =1,ninit=10)
theta <- c(-2,2,-1)
simulate.model3(theta, n=100, nsims =1,ninit=10)
simulate.model3(theta, n=100, nsims =2,ninit=10)
?optimx
library(mfergm)
set.seed(1) # seed for the simulations
nsims <- 1
ninit <- 5
theta <- c(-3,4,-5)
n <- 100
x <- rbinom(n,1,.5) # attributes
p <- c(2,3) # parameters location
q <- 1  # columns of x
dt <- matrix(0, ncol = 2, nrow =  p[2])
dt[,1] <- c(1,1,1)
dt[,2] <- c(1,9,1)
dt[,2] <- c(1,9,11)
tol = 0.000001 # tolerance for mf
g <- initialize.network(theta, n, directed = FALSE)
set.vertex.attribute(g, # the name of the network object
"x", # the name we want to reference the variable by in that object
x # the value we are giving that variable
)
cat("\n")
cat(paste("generate ", nsims, " networks", "\n"))
g0 <- simulate(~edges+nodematch("x")+triangles,
nsim = nsims,
coef = theta*c(2,2,1/n ),
basis = g,
control=control.simulate(
MCMC.burnin=10000000,
MCMC.interval=10000)
)
tobs <- data.frame(matrix(NA, ncol = 3, nrow = nsims))
names(tobs) <- c("edges", "x", "kstar(2)")
library(mfergm)
rm(list=ls())
library(mfergm)
nplayers <- 50  # number of players
true_parameters <- c(-2,1,2) # true parameter vector
number_of_simulations <- 100  # number of simulations
results <-  data.frame(matrix(NA, ncol = 9, nrow = number_of_simulations))
seed <- 1977
results <- simulate.model2(true_parameters, n = nplayers,
nsims = number_of_simulations, ninit = 5,
ergm = TRUE, mfergm = TRUE, mple = TRUE,
sim.seed = seed)$estimates
results <- simulate.model2(true_parameters, n = nplayers,
nsims = number_of_simulations, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
nsims=1
results <- simulate.model2(true_parameters, n = nplayers,
nsims = number_of_simulations, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
number_of_simulations=1
results <- simulate.model2(true_parameters, n = nplayers,
nsims = number_of_simulations, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
?ergm
set.seed(1) # seed for the simulations
nsims <- 2
ninit <- 5
theta <- c(-3,4,-5)
n <- 100
x <- rbinom(n,1,.5) # attributes
p <- c(2,3) # parameters location
q <- 1  # columns of x
dt <- matrix(0, ncol = 2, nrow =  p[2])
dt[,1] <- c(1,1,1)
dt[,2] <- c(1,9,1)
tol = 0.000001 # tolerance for mf
cat("initializing network for simulations")
g <- initialize.network(theta, n, directed = FALSE)
set.vertex.attribute(g, # the name of the network object
"x", # the name we want to reference the variable by in that object
x # the value we are giving that variable
)
cat("\n")
cat(paste("generate ", nsims, " networks", "\n"))
g0 <- simulate(~edges+nodematch("x")+kstar(2),
nsim = nsims,
coef = theta*c(2,2,1/n ),
basis = g,
control=control.simulate(
MCMC.burnin=10000000,
MCMC.interval=10000)
)
g0
g0[[1]]
g0[[2]]
tobs <- data.frame(matrix(NA, ncol = 3, nrow = nsims))
names(tobs) <- c("edges", "x", "kstar(2)")
for (i in 1:nsims) {
formula <- g0 ~ edges + nodematch("x") + kstar(2)
#tobs[i,] <- summary(formula)/(c((n^2)/2, n^3))
tobs[i,] <- summary(formula)/(c((n^2)/2, (
n^2)/2, (n^3)/2 ))
}
cat(paste("observed stats", tobs, "\n"))
estim.table<- data.frame(matrix(NA, nrow = nsims, ncol = 9))
names(estim.table) <- c("ergm", "ergm", "ergm",
#"CD2013", "CD2013",
"MF", "MF", "MF",
"mple", "mple", "mple")
cat(paste("estimating MPLE using ergm package", "\n"))
for (i in 1:nsims) {
cat("***********************************\n")
cat(paste("estimating sample" ,i, "\n"))
cat("***********************************\n")
#set.seed(1977)
formula <- g0[[i]] ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MPLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- summary(m1ergm)$coef
estim.table[i,7:9] <- c(est.params[1:3,1])*c(.5,.5,n)
}
i=1
formula <- g0[[i]] ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MPLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- summary(m1ergm)$coef
m1ergm
est.params
est.params <- summary(m1ergm)
est.params
est.params <- summary(m1ergm$coef)
est.params
est.params <- m1ergm$coef
est.params
formula <- g0[[i]] ~ edges + nodematch("x") + kstar(2)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Robbins-Monro",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
ergm
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Robbins-Monro",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ), verbose=TRUE)
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Robbins-Monro",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
# main.method = "Robbins-Monro",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stepping",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "MCMLE",
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "MCMLE",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
theta
theta*c(2,2,1/n )
m1ergm$coef
m1ergm$coef*(.5,.5,n)
m1ergm$coef*c(.5,.5,n)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "CD",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stepping",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
summary(m1ergm)
tobs
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Robbins-Monro",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stochastic-Approximation",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm
summary(m1ergm)
theta
m1ergm$coef*c(.5,.5,n)
theta
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stochastic-Approximation",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm
m1ergm$MCMCtheta
m1ergm$coef
summary(m1ergm)
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stochastic-Approximation",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
m1ergm
m1ergm <- ergm(formula, estimate = "MLE",
control=control.ergm(
main.method = "Stochastic-Approximation",
MCMC.burnin=100000,
MCMC.interval=10000,
init = theta*c(2,2,1/n )), verbose=TRUE
)
mcmc.diagnostics()
mcmc.diagnostics(m1ergm)
library(mfergm)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = number_of_simulations, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = F, mfergm = F, mple = TRUE,
sim.seed = seed)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = T, mfergm = F, mple = F,
sim.seed = seed)
i=1
formula <- g0[[i]] ~ edges + nodematch("x") + triangles
m1ergm <- ergm(formula, estimate = "MPLE",
control=control.ergm(
MCMC.burnin=100000,
MCMC.interval=1000,
init = theta*c(2,2,1/n ))
)
est.params <- m1ergm$coef
estim.table[i,7:9] <- c(est.params[1:3,1])*c(.5,.5,n)
est.params
estim.table[i,7:9] <- c(est.params)*c(.5,.5,n)
estim.table[i,7:9] <- est.params*c(.5,.5,n)
estim.table[1,7:9]
estim.table[i,7:9] <- c(est.params)*c(.5,.5,n)
estim.table[1,7:9]
library(mfergm)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = T, mfergm = F, mple = F,
sim.seed = seed)
library(mfergm)
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = T, mfergm = F, mple = F,
sim.seed = seed)
results
theta
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 2, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
theta
true_parameters
results <- simulate.model2(c(-3,4,-5), n = nplayers,
nsims = 2, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
true_parameters
results
true_parameters
results <- simulate.model2(true_parameters, n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
true_parameters
results <- simulate.model2(c(-2,1,.5), n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model4(c(-2,1,.5), n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results <- simulate.model3(c(-2,1,.5), n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-2,1,2), n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = nplayers,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = 100,
nsims = 5, ninit = 5,
ergm = T, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = 1000,
nsims = 5, ninit = 5,
ergm = F, mfergm = F, mple = T,
sim.seed = seed)
results <- simulate.model3(c(-1,1,-2), n = 1000,
nsims = 2, ninit = 5,
ergm = F, mfergm = F, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = 200,
nsims = 2, ninit = 5,
ergm = F, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = 500,
nsims = 2, ninit = 5,
ergm = F, mfergm = T, mple = T,
sim.seed = seed)
results
results <- simulate.model3(c(-1,1,-2), n = 300,
nsims = 5, ninit = 5,
ergm = F, mfergm = F, mple = T,
sim.seed = seed)
results
x<-seq(0.01,100,.1)
y <- log(1+x)
plot(x,y)
lines(x,x)
plot(x,y, type ="l", col= red)
plot(x,y, type ="l", col= red)
plot(x,y, type ="l", col= "red")
lines(x,x)
plot(x,y, type ="l", col= "red", xlim = c(-.1,.1))
plot(x,y, type ="l", col= "red", xlim = c(-.1,1))
lines(x,x)
